 From an email aiming to crystalise thinking about dependencies:

Expanding (1), a topological sort relies on the dependencies all having
the form "A depends on B", which turns into "B must come before A".
Machination dependencies come in the profile in two basic forms:

- A requires B
- C excludes D

These are statements about state, not actions, and its the actions which
need to be ordered. I think the key is to turn these into dependencies
on actions (i.e. workunits). How to do this in turn varies according to
which actions are being taken on the state information referenced by A-D
(add, remove or modify).

- If wuA is add or modify, wuB must be add or modify and the dependency
is as usually written (wuA deps wuB).

- If wuA is remove, wuB could be anything (from a dependency point of
view: it probably couldn't be an add for other reasons), but if it is
also remove we have a dependency wuB deps wuA (i.e. the reverse of what
one might expect on seeing "A requires B"). Note that we don't lose much
by enforcing wuB deps wuA regardless of whether wuB is a remove or not.

- If wuC is add or modify, wuD must be remove (anything else would imply
the existence of D and C together). Dependency wuC deps wuD.

- If wuC is remove, wuD could be add or remove. If wuD is add, we have
dependency wuD deps wuC.

Whilst circular requires and excludes are allowed at the server end when
constructing the profile XML, these should always be unordered
dependencies. Only ordered dependencies are preserved and written into
the profile for update.py to find. Therefore, encountering a circular
dependency in the topological sort should be an error.



found this after a quick search:

http://pypi.python.org/pypi/topsort

notably:

def topsort_levels(pairlist):
    """Topologically sort a list of (parent, child) pairs into depth levels.

    This returns a generator.
    Turn this into a an iterator using the iter built-in function.
    (if you iterate over the iterator, each element gets generated when
    it is asked for, rather than generating the whole list up-front.)

    Each generated element is a list of items at that dependency level.

    >>> dependency_pairs = [(1,2), (3,4), (5,6), (1,3), (1,5), (1,6), (2,5)]
    >>> for level in iter(topsort_levels( dependency_pairs )):
    ...    print level
    [1]
    [2, 3]
    [4, 5]
    [6]

    >>> dependency_pairs = [(1,2), (1,3), (2,4), (3,4), (5,6), (4,5)]
    >>> for level in iter(topsort_levels( dependency_pairs )):
    ...    print level
    [1]
    [2, 3]
    [4]
    [5]
    [6]

    >>> dependency_pairs = [(1,2), (2,3), (3,4), (4, 3)]
    >>> try:
    ...     for level in iter(topsort_levels( dependency_pairs )):
    ...         print level
    ... except CycleError, exc:
    ...     print 'CycleError:', exc
    [1]
    [2]
    CycleError: ({3: 1, 4: 1}, {3: [4], 4: [3]})


    The cycle error should look like.
    CycleError: ({3: 1, 4: 1}, {3: [4], 4: [3]})
    # todo: Make the doctest more robust (i.e. handle arbitrary dict order).

    """
